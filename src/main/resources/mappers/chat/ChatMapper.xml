<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.bbagisix.chat.mapper.ChatMapper">

    <!-- ChatMessageDto ResultMap -->
    <resultMap id="ChatMessageMap" type="org.bbagisix.chat.entity.ChatMessage">
        <id property="messageId" column="message_id"/>
        <result property="challengeId" column="challenge_id"/>
        <result property="userId" column="user_id"/>
        <result property="message" column="message"/>
        <result property="sentAt" column="sent_at"/>
        <result property="messageType" column="message_type"/>
        <result property="userName" column="user_name"/>
    </resultMap>

    <!-- ChatHistoryDto ResultMap -->
    <resultMap id="ChatHistoryResultMap" type="org.bbagisix.chat.dto.ChatHistoryDTO">
        <result column="messageId" property="messageId"/>
        <result column="challengeId" property="challengeId"/>
        <result column="userId" property="userId"/>
        <result column="message" property="message"/>
        <result column="sentAt" property="sentAt" javaType="java.time.LocalDateTime"/>
        <result column="messageType" property="messageType"/>
        <result column="userName" property="userName"/>
    </resultMap>

    <!-- 채팅 메시지 저장 -->
    <insert id="insertMessage" parameterType="org.bbagisix.chat.entity.ChatMessage"
            useGeneratedKeys="true" keyProperty="messageId">
        INSERT INTO chat_message (challenge_id,
                                  user_id,
                                  message,
                                  sent_at,
                                  message_type)
        VALUES (#{challengeId},
                #{userId},
                #{message},
                #{sentAt},
                #{messageType})
    </insert>


    <!-- 특정 메시지 조회 (사용자 정보 포함) -->
    <select id="selectMessageById" parameterType="long" resultMap="ChatMessageMap">
        SELECT cm.message_id,
               cm.challenge_id,
               cm.user_id,
               cm.message,
               cm.sent_at,
               cm.message_type,
               u.name AS user_name
        FROM chat_message cm
                 LEFT JOIN user u ON cm.user_id = u.user_id
        WHERE cm.message_id = #{messageId}
    </select>

    <!-- 사용자 정보 조회 -->
    <select id="selectUserById" parameterType="long" resultType="map">
        SELECT user_id,
               name
        FROM user
        WHERE user_id = #{userId}
    </select>

    <!-- 사용자가 현재 참여중인 챌린지 채팅방 조회 -->
    <select id="selectUserCurrentChatRoom" parameterType="long" resultType="map">
        SELECT uc.challenge_id,
               c.title       as challenge_name,
               uc.status,
               uc.start_date as joined_at,
               uc.end_date
        FROM user_challenge uc
                 JOIN challenge c ON uc.challenge_id = c.challenge_id
        WHERE uc.user_id = #{userId}
          AND uc.status = 'ongoing' LIMIT 1
    </select>

    <!-- 특정 챌린지의 참여자 목록 조회 -->
    <select id="selectParticipants" parameterType="long" resultType="map">
        SELECT u.user_id,
               u.name        as user_name,
               uc.start_date as joined_at,
               CASE
                   WHEN uc.status = 'ongoing' THEN true
                   ELSE false
                   END       as is_active
        FROM user_challenge uc
                 JOIN user u ON uc.user_id = u.user_id
        WHERE uc.challenge_id = #{challengeId}
          AND uc.status = 'ongoing'
        ORDER BY uc.start_date ASC
    </select>

    <!-- 사용자가 참여한 시점 이후의 채팅 메시지 조회 -->
    <select id="selectChatHistoryByUserParticipation" resultMap="ChatHistoryResultMap">
        SELECT cm.message_id                               as messageId,
               cm.challenge_id                             as challengeId,
               cm.user_id                                  as userId,
               cm.message,
               cm.sent_at                                  as sentAt,
               cm.message_type                             as messageType,
               COALESCE(u.name, CONCAT('사용자', cm.user_id)) as userName
        FROM chat_message cm
                 LEFT JOIN user u ON cm.user_id = u.user_id
        WHERE cm.challenge_id = #{challengeId}
          AND cm.sent_at >= (SELECT uc.start_date
                             FROM user_challenge uc
                             WHERE uc.user_id = #{userId}
                               AND uc.challenge_id = #{challengeId}
                               AND uc.status = 'ongoing')
        ORDER BY cm.sent_at ASC
            LIMIT #{limit}
    </select>

    <!-- 사용자의 특정 챌린지 참여 상태 확인 -->
    <select id="selectUserChallengeStatus" resultType="org.bbagisix.chat.dto.UserChallengeInfoDTO">
        SELECT uc.user_challenge_id as userChallengeId,
               uc.user_id           as userId,
               uc.challenge_id      as challengeId,
               c.title              as challengeName,
               uc.status,
               uc.start_date        as startDate,
               uc.end_date          as endDate
        FROM user_challenge uc
                 JOIN challenge c ON uc.challenge_id = c.challenge_id
        WHERE uc.user_id = #{userId}
          AND uc.challenge_id = #{challengeId}
          AND uc.status = 'ongoing'
    </select>

    <!-- 사용자의 현재 활성 챌린지 정보 조회 -->
    <select id="selectUserActiveChallengeInfo" resultType="org.bbagisix.chat.dto.UserChallengeInfoDTO">
        SELECT uc.user_challenge_id as userChallengeId,
               uc.user_id           as userId,
               uc.challenge_id      as challengeId,
               c.title              as challengeName,
               uc.status,
               uc.start_date        as startDate,
               uc.end_date          as endDate
        FROM user_challenge uc
                 JOIN challenge c ON uc.challenge_id = c.challenge_id
        WHERE uc.user_id = #{userId}
        ORDER BY uc.start_date DESC LIMIT 1
    </select>

</mapper>