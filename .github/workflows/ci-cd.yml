name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Install Gradle manually
        run: |
          wget -q https://services.gradle.org/distributions/gradle-8.8-bin.zip
          unzip -q gradle-8.8-bin.zip
          export PATH=$PATH:$(pwd)/gradle-8.8/bin
          gradle --version

      - name: Build with Gradle
        run: |
          export PATH=$PATH:$(pwd)/gradle-8.8/bin
          gradle build -x test

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/dondothat:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: [build-and-push]
    runs-on: ubuntu-latest
    if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop') && github.event_name == 'push'

    steps:
      - uses: actions/checkout@v3

      - name: Deploy with Docker Compose and Nginx
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          timeout: 300s
          script: |
            # 환경 변수 설정
            export GOOGLE_CLIENT_ID="${{ secrets.GOOGLE_CLIENT_ID }}"
            export GOOGLE_CLIENT_SECRET="${{ secrets.GOOGLE_CLIENT_SECRET }}"
            export NAVER_CLIENT_ID="${{ secrets.NAVER_CLIENT_ID }}"
            export NAVER_CLIENT_SECRET="${{ secrets.NAVER_CLIENT_SECRET }}"
            export BASE_URL="${{ secrets.BASE_URL }}"
            export JWT_SECRET="${{ secrets.JWT_SECRET }}"
            export AES_SECRET_KEY="${{ secrets.AES_SECRET_KEY }}"
            export CODEF_CLIENT_ID="${{ secrets.CODEF_CLIENT_ID }}"
            export CODEF_CLIENT_SECRET="${{ secrets.CODEF_CLIENT_SECRET }}"
            export CODEF_PUBLIC_KEY="${{ secrets.CODEF_PUBLIC_KEY }}"
            export API_KEY=${{ secrets.API_KEY }}"
            
            # SSL 인증서 디렉토리 생성 (없다면)
            mkdir -p ssl
            
            # SSL 인증서 생성 (없다면)
            if [ ! -f ssl/server.key ] || [ ! -f ssl/server.crt ]; then
              cd ssl
              openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
                -keyout server.key -out server.crt \
                -subj "/C=KR/ST=Seoul/L=Seoul/O=DonDoThat/CN=54.208.50.238"
              cd ..
            fi
            
            # Docker Compose 파일 생성
            cat > docker-compose.yml << EOF
            version: "3.8"
            
            services:
              nginx:
                image: nginx:alpine
                container_name: nginx-proxy
                ports:
                  - "80:80"
                  - "443:443"
                volumes:
                  - ./nginx.conf:/etc/nginx/nginx.conf
                  - ./ssl:/etc/nginx/ssl
                depends_on:
                  - dondothat-server
                  - llm-server
                networks:
                  - dondothat-network
                restart: always
            
              redis-server:
                image: redis:7-alpine
                container_name: redis-server
                restart: always
                expose:
                  - "6379"
                networks:
                  - dondothat-network
            
              llm-server:
                image: ec2-user-llm-server
                container_name: llm-server
                expose:
                  - "8000"
               environment:
                  - API_KEY=${{ secrets.API_KEY }}"
                networks:
                  - dondothat-network
                restart: unless-stopped
            
              dondothat-server:
                image: ghcr.io/${{ github.repository_owner }}/dondothat:latest
                container_name: dondothat-server
                expose:
                  - "8080"
                environment:
                  - SPRING_PROFILES_ACTIVE=prod
                  - DB_HOST=mysql-server
                  - DB_USERNAME=root
                  - DB_PASSWORD=dondothat1234
                  - DB_NAME=dondothat
                  - REDIS_HOST=redis-server
                  - SPRING_MAIL_HOST=${{ secrets.SMTP_HOST }}
                  - SPRING_MAIL_PORT=${{ secrets.SMTP_PORT }}
                  - SPRING_MAIL_USERNAME=${{ secrets.SMTP_USERNAME }}
                  - SPRING_MAIL_PASSWORD=${{ secrets.SMTP_PASSWORD }}
                  - SPRING_MAIL_PROPERTIES_MAIL_SMTP_AUTH=${{ secrets.SMTP_AUTH }}
                  - SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_ENABLE=${{ secrets.SMTP_STARTTLS_ENABLE }}
                  - GOOGLE_CLIENT_ID=$GOOGLE_CLIENT_ID
                  - GOOGLE_CLIENT_SECRET=$GOOGLE_CLIENT_SECRET
                  - NAVER_CLIENT_ID=$NAVER_CLIENT_ID
                  - NAVER_CLIENT_SECRET=$NAVER_CLIENT_SECRET
                  - BASE_URL=$BASE_URL
                  - JWT_SECRET=$JWT_SECRET
                  - AES_SECRET_KEY=$AES_SECRET_KEY
                  - CODEF_CLIENT_ID=$CODEF_CLIENT_ID
                  - CODEF_CLIENT_SECRET=$CODEF_CLIENT_SECRET
                  - CODEF_PUBLIC_KEY=$CODEF_PUBLIC_KEY
                depends_on:
                  - mysql-server
                  - redis-server
                networks:
                  - dondothat-network
                restart: unless-stopped
            
              mysql-server:
                image: mysql:8.0
                container_name: mysql-server
                environment:
                  - MYSQL_ROOT_PASSWORD=dondothat1234
                  - MYSQL_DATABASE=dondothat
                ports:
                  - "3306:3306"
                volumes:
                  - mysql_data:/var/lib/mysql
                networks:
                  - dondothat-network
                restart: unless-stopped
            
            networks:
              dondothat-network:
                driver: bridge
            
            volumes:
              mysql_data:
            EOF
            
            # 최신 이미지 pull
            docker pull ghcr.io/${{ github.repository_owner }}/dondothat:latest
            docker pull redis:7-alpine
            docker pull nginx:alpine
            
            # 서비스 재시작
            /usr/local/bin/docker-compose down || true
            /usr/local/bin/docker-compose up -d
            
            # 상태 확인
            sleep 15
            /usr/local/bin/docker-compose ps
            /usr/local/bin/docker-compose logs --tail=10 nginx
            /usr/local/bin/docker-compose logs --tail=10 dondothat-server

      - name: Copy Nginx config to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "nginx/nginx.conf"
          target: "."
          strip_components: 1
